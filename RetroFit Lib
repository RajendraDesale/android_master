
Import library
   implementation 'com.squareup.retrofit2:retrofit:2.3.0'

################## Request Generation using retri Fit ######################################
        import com.putuguna.markerlocation.LoggingInterceptor;
        import okhttp3.OkHttpClient;
        import retrofit2.Retrofit;
        import retrofit2.converter.gson.GsonConverterFactory;

        public class ApiClient {
            public static final String URL      = "http://192.168.43.148/MenampilkanDataKetablePHP/";
            public static Retrofit RETROFIT     = null;

            public static Retrofit getClient(){
                if(RETROFIT==null){
                    OkHttpClient client = new OkHttpClient.Builder()
                            .addInterceptor(new LoggingInterceptor())
                            .build();
                    RETROFIT = new Retrofit.Builder()
                            .baseUrl(URL)
                            .client(client)
                            .addConverterFactory(GsonConverterFactory.create())
                            .build();
                }
                return RETROFIT;
            }
        }

################################### Create Interface for request ############################
import retrofit2.Call;
import retrofit2.http.GET;

public interface ApiService {
    @GET("JsonDisplayMarker.php")
    Call<ListLocationModel> getAllLocation();

    //@POST("user/edit")
    //Call<User> updateUser(@Field("first_name") String first, @Field("last_name") String last);
}

######################### Class for create Json Array ######################################
import android.util.Log;
import java.io.IOException;
import okhttp3.Interceptor;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okio.Buffer;

public class LoggingInterceptor implements Interceptor {
    @Override
    public Response intercept(Chain chain) throws IOException {
        Request request = chain.request();
        long t1 = System.nanoTime();
        String requestLog = String.format("Sending request %s on %s%n%s",request.url(), chain.connection(), request.headers());
        //YLog.d(String.format("Sending request %s on %s%n%s",
        // request.url(), chain.connection(), request.headers()));
        if (request.method().compareToIgnoreCase("post") == 0) {
            requestLog = "\n" + requestLog + "\n" + bodyToString(request);
        }
        Log.d("TAG", "request" + "\n" + requestLog);
        Response response = chain.proceed(request);
        long t2 = System.nanoTime();
        String responseLog = String.format("Received response for %s in %.1fms%n%s",response.request().url(), (t2 - t1) / 1e6d, response.headers());
        String bodyString = response.body().string();
        Log.d("TAG", "response" + "\n" + responseLog + "\n" + bodyString);
        return response.newBuilder()
                .body(ResponseBody.create(response.body().contentType(), bodyString))
                .build();
    }

    public static String bodyToString(final Request request) {
        try {
            final Request copy = request.newBuilder().build();
            final Buffer buffer = new Buffer();
            copy.body().writeTo(buffer);
            return buffer.readUtf8();
        } catch (final IOException e) {
            return "did not work";
        }
    }
}
